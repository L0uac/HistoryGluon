History Gluon Server-client protocol specification

Date: 2012/11/11
Version: 0.8.0

*** Basics rules ***
Endian: Little
[<Number>] means Length in Byte (decimal)

=========================================
COMMAND: Connect
=========================================
[ 4] Magic Code
   0x48, 0x47, 0x4c, 0x00  ('H','G','L','\0')
[ 2] Length of database name
[ v] Database name
 valid characters: A-z, 0-9, .(dot), _(underscore), -(hyphen), @(at),
 and /(slash).
 maximum length: 1024

-----------------------------------------
REPLY: Add Data
-----------------------------------------
[ 4] Magic Code
   0x48, 0x47, 0x4c, 0x00  ('H','G','L','\0')
[ 4] Result

=========================================
COMMAND: Add Data
=========================================
[ 4] Packet length (not including this field)
  When 'Data type' is String and Blob, this doesn't include the size of
  String body and Blob body respectively.
[ 4] Command type
  100: Add Data
[ 2] Data type 
  00: Float (double precision: 64bit)
  01: Integer (64bit)
  02: String
  03: Blob (binary large object)
[ 8] ID
[ 4] Time: second
[ 4] Time: nano-second
--- Data Type: 00 (Float) ---
[ 8] Float Data IEEE 754 (64bit)
--- Data type: 01 (Integer) ---
[ 8] Integer Data
--- Data type: 02 (String) ---
[ 4] String length (The maximum: 0x7ffffff)
[ v] String body (Null terminator is NOT needed)
--- Data type: 03 (Blob) ---
[ 8] Blob length (The maximum: 0x7fffffff ffffffff)
[ v] Blobl body

-----------------------------------------
REPLY: Add Data
-----------------------------------------
[ 4] Packet length (not including this)
[ 2] Reply type
  100: reply: Add Data
[ 4] Result

=========================================
COMMAND PKT: Query Data
=========================================
[ 4] Packet length (not including this)
[ 2] Command type
  200: Query Data
[ 8] ID
[ 4] Time: second
[ 4] Time: nano-second
[ 2] Query type
  0: only match
  1: less data when not found
  2: greater data when not found

-----------------------------------------
REPLY: Query Data
-----------------------------------------
[ 4] Packet length (not including this and up to 'Data type')
[ 2] Reply type
  200: reply: Query Data
[ 4] Result
<< Body part: If Found is 0, this part is omitted>>
[ 8] ID
[ 4] Time: second
[ 4] Time: nano-second
[ 2] Data type
--- Data Type: 00 (Float) ---
[ 8] Float Data IEEE 754 (64bit)
--- Data type: 01 (Integer) ---
[ 8] Integer Data
--- Data type: 02 (String) ---
[ 4] String length (The maximum: 0x7ffffff)
[ v] String body (Null terminator is NOT needed)
--- Data type: 03 (Blob) ---
[ 8] Blob length (The maximum: 0x7fffffff ffffffff)
[ v] Blobl body
<< End of Body part >>

=========================================
COMMAND PKT: Range Query
=========================================
[ 4] Packet length (not including this field)
[ 4] Command type
  300: Range Query
[ 8] ID
[ 4] Start Time: second
[ 4] Start Time: nano-second
[ 4] End Time: second
[ 4] End Time: nano-second
  Data with the Start Time is returned.
  Data with the End Time is Not returned.
[ 8] The number of the maximum entries
  0: No limit
[ 2] Sort order request
  0: ascending
  1: descending
  2: not sorted

-----------------------------------------
REPLY: Range Query
-----------------------------------------
[ 4] Packet length (not including this and up to 'Sort order')
[ 2] Reply type
  300: reply: Range Query
[ 4] Result
[ 8] The number of entries
[ 2] Sort order
  0: ascending
  1: descending
  2: not sorted
<< Body part: Repeated the the number of entries times>>
%%% The same as the body of 'REPLY: Query Data' %%%
<< End of Body part >>

=========================================
COMMAND PKT: Query All
=========================================
[ 4] Packet length (not including this field)
[ 4] Command type
  310: Query All

-----------------------------------------
REPLY: Query All
-----------------------------------------
[ 4] Packet length (not including this and up to 'Reply type')
[ 2] Reply type
  310: reply: Query All
<< Body part: Repeated the the number of entries times>>
%%% The same as the body of 'REPLY: Query Data' %%%
<< End of Body part >>
[ 8] 0
[ 4] 0
[ 4] 0
[ 2] 0xf000
[ 4] Result

=========================================
COMMAND PKT: Get Miminum Time
=========================================
[ 4] Packet length (not including this)
[ 2] Command type
  400: Get Mininum Time
[ 8] Item ID

-----------------------------------------
REPLY: Get Minimum Time
-----------------------------------------
[ 4] Packet length (not including this)
[ 2] Reply Type
  400: Get Mininum Time
[ 4] Result
[ 4] Minimum time: second
[ 4] Minimum time: nano-second

=========================================
COMMAND PKT: Get Statistics
=========================================
[ 4] Packet length (not including this)
[ 2] Command type
  500: Get Statistics
[ 8] ID
[ 4] Start Time: second
[ 4] Start Time: nano-second
[ 4] End Time: second
[ 4] End Time: nano-second
  Data with the Start Time is used.
  Data with the End Time is Not used.

NOTE: Data with ID must be Float or Integer type.

-----------------------------------------
REPLY PKT: Get Statistics
-----------------------------------------
[ 4] Packet length (not including this)
[ 2] Reply type
  500: reply: Get Statistics
[ 4] Result
[ 8] ID
[ 8] Count: Interger (64bit)
[ 8] Minimum: Float (IEEE754)
[ 8] Maximum: Float (IEEE754)
[ 8] Sum: Float (IEEE754)

=========================================
COMMAND PKT: Delete Data
=========================================
[ 4] Packet length (not including this)
[ 2] Command type
  600: Delete Data
[ 8] ID
[ 4] Time: second
[ 4] Time: nano-second
[ 2] Delete way:
  0: Just matched data
  1: Data with the time that is equal to or less than Time
  2: Data with the time that is less than Time
  3: Data with the time that is equal to or greater than Time
  4: Data with the time that is greater than Time

-----------------------------------------
REPLY PKT: Delete Data
-----------------------------------------
[ 4] Packet length (not including this)
[ 2] Reply type
  600: reply: Delete Data
[ 4] Result
[ 8] The count of the deleted data: Integer (64bit)

=========================================
COMMAND PKT: Delete All Data
=========================================
[ 4] Packet length (not including this)
[ 2] Command type
  610: Delete All Data

-----------------------------------------
REPLY PKT: Delete All Data
-----------------------------------------
[ 4] Packet length (not including this)
[ 2] Reply type
  610: reply: Delete All Data
[ 4] Result

==================================================
Result Code
==================================================
   0: Success
   1: Unknown error
   2: Server Error
   3: Unsupported protocol version
   4: Not implemented
 100: Authentification failed
 101: Domain string is too long
 102: Invalid characters in domain string
 200: Packet short
 201: Invalid data type
 202: Invalid sort type
 300: Entry exists
 301: Not found
 302: Too many enties
