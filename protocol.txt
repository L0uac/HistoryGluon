History Gluon Server-client protocol specification

Date: 2012/10/27
Version: 0.1.0

*** Basics rules ***
Endian: Little
[<Number>] means Length in Byte (decimal)

=========================================
COMMAND: Add Data
=========================================
[ 4] Packet length (not including this field)
  When 'Data type' is String annd Blob, this doesn't include the size of
  String body and Blob body respectively.
[ 4] Command type
  0100: Add Data
[ 2] Data type 
  00: Float (double precision: 64bit)
  01: Integer (64bit)
  02: String
  03: Blob (binary large object)
[ 8] ID
[ 4] Time: second
[ 4] Time: nano-second
--- Data Type: 00 (Float) ---
[ 8] Float Data IEEE 754 (64bit)
--- Data type: 01 (Integer) ---
[ 8] Integer Data
--- Data type: 02 (String) ---
[ 4] String length (The maximum: 0x7ffffff)
[ v] String body (Null terminator is NOT needed)
--- Data type: 03 (Blob) ---
[ 8] Blob length (The maximum: 0x7fffffff ffffffff)
[ v] Blobl body

-----------------------------------------
REPLY: Add Data
-----------------------------------------
[ 4] Packet length (not including this)
[ 2] Reply type
  0100: reply: Add data
[ 4] Result
  0: Success
  1: Error due to unknown reason
  2: Error: theere is the entry that has the same id and time.

=========================================
COMMAND PKT: Range Query
=========================================
[ 4] Packet length (not including this field)
[ 4] Command type
  1000: Range Query
[ 8] ID
[ 4] Start Time:
[ 4] End Time:
[ 4] The number of the maximum entries
  0: No limit
[ 2] Sort order
  0: ascending
  1: descending

-----------------------------------------
REPLY: Range Query
-----------------------------------------
[ 4] Packet length (not including this)
[ 2] Reply type
   1000: reply: get data
[ 4] Result
  0: Success
  1: Error due to unknown reason
  2: Too many records (overflow)
[ 4] The number of entries
<< REPEAT: Number of Entries >>
[ 8] ID
[ 4] Time: second
[ 4] Time: nano-second
[ 2] Data type
--- Data Type: 00 (Float) ---
[ 8] Float Data IEEE 754 (64bit)
--- Data type: 01 (Integer) ---
[ 8] Integer Data
--- Data type: 02 (String) ---
[ 4] String length (The maximum: 0x7ffffff)
[ v] String body (Null terminator is NOT needed)
--- Data type: 03 (Blob) ---
[ 8] Blob length (The maximum: 0x7fffffff ffffffff)
[ v] Blobl body
<< REPEAT END >>

===== COMMAND PKT: Query data with timestamp =====
* Packet length [4B] (not including this)
* Command Type  [2B]
   1050: get data with limit
* Item ID [8B]
* sec [4B]
* ns [4B]
* serach near [1B]: 0: No, 1: Yes
===== PKT END =====

===== REPLY PKT: Get data with timestamp =====
% the same as 'Get data' (Reply Type: 1050, Number of Entries: 1)
===== PKT END =====

===== COMMAND PKT: Get MinSec =====
* Packet length [4B] (not including this)
* Command Type  [2B]
   1100: GetMinSec
* Item ID [8B]
===== PKT END =====

===== REPLY PKT: Get MinSec =====
* Packet length [4B] (not including this)
* Reply Type  [2B]
   1100: reply: get data
* Result [4B]
   0: Success
   1: Error due to unknown reason
* Minimum sec [4B]
===== PKT END =====

===== COMMAND PKT: Get statistics =====
* Packet length [4B] (not including this)
* Command Type  [2B]
   1200: get statistical data
* Item ID [8B]
* sec0 [4B]: 0 means not limited
* sec1 [4B]: 0 means not limited
===== PKT END =====

===== REPLY PKT: Get statistics =====
* Packet length [4B] (not including this)
* Reply Type  [2B]
   1200: reply: get statistical data
* Result [4B]
   0: Success
   1: Error due to unknown reason
* Item ID [8B]
* sec0 [4B]
* sec1 [4B]
* count [8B]: Uint64
* min [8B]  IEEE754
* max [8B]: IEEE754
* sum [8B]: IEEE754
===== PKT END =====

===== COMMAND PKT: Delete data =====
* Packet length [4B] (not including this)
* Command Type  [2B]
   2000: delete data
* Item ID [8B]
* min_sec [4B]
===== PKT END =====

===== REPLY PKT: Get data =====
* Packet length [4B] (not including this)
* Reply Type  [2B]
   2000: reply: get data
* Result [4B]
   0: Success
   1: Error due to unknown reason
* NumberOfDeleted [4B]
===== PKT END =====

